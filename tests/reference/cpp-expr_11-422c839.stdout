#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
void __main____global_statements();
void f();
namespace {
}

// Implementations
void f()
{
    bool b;
    int32_t i;
    i = 3;
    b = (bool)(i);
    assert (b);
    std::cout << b << std::endl;
}

void __main____global_statements()
{
    f();
}

namespace {

void main2() {
    __main____global_statements();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
